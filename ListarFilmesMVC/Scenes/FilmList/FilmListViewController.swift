//
//  FilmListViewController.swift
//  ListarFilmesVIP
//
//  Created by William Moreira on 02/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit

protocol FilmListDisplayLogic where Self: UIViewController {
    func displayViewModel(_ viewModel: FilmListModel.ViewModel)
    func displaySetupMainView(_ viewModel: FilmListModel.FilmList.ViewModel)
    func displayGoToDetailList(_ viewModel: FilmListModel.FilmListResult.ViewModel)
}

final class FilmListViewController: UIViewController {
    
    private let mainView: FilmListView
    private var interactor: FilmListInteractable!
    private var router: FilmListRouting!
    
    init(mainView: FilmListView, dataSource: FilmListModel.DataSource) {
        self.mainView = mainView
        self.mainView.listFilms = dataSource.filmModelList.results
        super.init(nibName: nil, bundle: nil)
        interactor = FilmListInteractor(viewController: self, dataSource: dataSource)
        router = FilmListRouter(viewController: self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        mainView.backgroundColor = .white
        mainView.delegate = self

        let request = FilmListModel.FilmList.Request()
        interactor.setupMainView(request)
        
        //configurar sair do app
        //interactor.doSomething(item: 22)
    }
    
    override func loadView() {
        view = mainView
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented, You should't initialize the ViewController through Storyboards")
    }
}


// MARK: - FilmListDisplayLogic
extension FilmListViewController: FilmListDisplayLogic {
    func displayGoToDetailList(_ viewModel: FilmListModel.FilmListResult.ViewModel) {
        let route = FilmListModel.FilmList.Route()
        router.routeToFilmDetail(route)
    }
    
    func displaySetupMainView(_ viewModel: FilmListModel.FilmList.ViewModel) {
        guard let view = self.view as? FilmListView else { return }
        view.listFilms = viewModel.list.results
    }
    
    func displayViewModel(_ viewModel: FilmListModel.ViewModel) {
        DispatchQueue.main.async {
            switch viewModel {
                
            case .doSomething(let viewModel):
                self.displayDoSomething(viewModel)
            }
        }
    }
}


// MARK: - FilmListViewDelegate
extension FilmListViewController: FilmListViewDelegate {
    
    func goToDetailViewController(_ result: Result) {
        let request = FilmListModel.FilmListResult.Request(result: result)
        interactor.goToDetail(request)
    }
    
    func sendDataBackToParent(_ data: Data) {
        //usually this delegate takes care of users actions and requests through UI
        //do something with the data or message send back from mainView
    }
}


// MARK: - Private Zone
private extension FilmListViewController {
    
    func displayDoSomething(_ viewModel: NSObject) {
        print("Use the mainView to present the viewModel")
        //example of using router
        router.routeTo(.xScene(xData: 22))
    }
}
