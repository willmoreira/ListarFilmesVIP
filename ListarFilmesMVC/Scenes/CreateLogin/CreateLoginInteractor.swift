//
//  CreateLoginInteractor.swift
//  ListarFilmesVIP
//
//  Created by William Moreira on 02/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

typealias CreateLoginInteractable = CreateLoginBusinessLogic & CreateLoginDataStore

protocol CreateLoginBusinessLogic {
  
  func doRequest(_ request: CreateLoginModel.Request)
}

protocol CreateLoginDataStore {
  var dataSource: CreateLoginModel.DataSource { get }
}

final class CreateLoginInteractor: CreateLoginDataStore {
  
  var dataSource: CreateLoginModel.DataSource
  
  private var presenter: CreateLoginPresentationLogic
  
  init(viewController: CreateLoginDisplayLogic?, dataSource: CreateLoginModel.DataSource) {
    self.dataSource = dataSource
    self.presenter = CreateLoginPresenter(viewController: viewController)
  }
}


// MARK: - CreateLoginBusinessLogic
extension CreateLoginInteractor: CreateLoginBusinessLogic {
  
  func doRequest(_ request: CreateLoginModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async {
      
      switch request {
        
      case .doSomething(let item):
        self.doSomething(item)
      }
    }
  }
}


// MARK: - Private Zone
private extension CreateLoginInteractor {
  
  func doSomething(_ item: Int) {
    
    //construct the Service right before using it
    //let serviceX = factory.makeXService()
    
    // get new data async or sync
    //let newData = serviceX.getNewData()
    
    presenter.presentResponse(.doSomething(newItem: item + 1, isItem: true))
  }
}
