//
//  ResetLoginInteractor.swift
//  ListarFilmesVIP
//
//  Created by William Moreira on 02/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import FirebaseAuth

typealias ResetLoginInteractable = ResetLoginBusinessLogic & ResetLoginDataStore

protocol ResetLoginBusinessLogic {
    func doResetLogin(_ request: ResetLoginModel.ResetLogin.Request)
}

protocol ResetLoginDataStore {
    var dataSource: ResetLoginModel.DataSource { get }
}

final class ResetLoginInteractor: ResetLoginDataStore {
    
    var dataSource: ResetLoginModel.DataSource
    
    private var presenter: ResetLoginPresentationLogic
    
    init(viewController: ResetLoginDisplayLogic?, dataSource: ResetLoginModel.DataSource) {
        self.dataSource = dataSource
        self.presenter = ResetLoginPresenter(viewController: viewController)
    }
    
    func tryResetLogin(request: ResetLoginModel.ResetLogin.Request){
        presenter.presentStartLoading()
        var response = ResetLoginModel.ResetLogin.Response(titleMessage: "Sucesso!", message: "As orientações foram enviadas para seu email!")
        
        if let login = request.login {
            Auth.auth().sendPasswordReset(withEmail: login) { error in
                self.presenter.presentStopLoading()
                if let error = error {
                    if error.localizedDescription == "There is no user record corresponding to this identifier. The user may have been deleted." {
                        response = ResetLoginModel.ResetLogin.Response(
                            titleMessage: "Usuário não encontrado",
                            message: "Não há registro de usuário correspondente a este identificador. O usuário pode ter sido excluído." )
                        self.presenter.presentShowAlert(response)
                    }
                    return
                }
                self.presenter.presentShowAlert(response)
            }
        }
    }
}

// MARK: - ResetLoginBusinessLogic
extension ResetLoginInteractor: ResetLoginBusinessLogic {
    func doResetLogin(_ request: ResetLoginModel.ResetLogin.Request) {
        guard let username = request.login, !username.isEmpty else {
            let response = ResetLoginModel.ResetLogin.Response(titleMessage: "Erro no campo Login", message: "Preencha o campo Login")
            presenter.presentShowAlert(response)
            return
        }
        tryResetLogin(request: request)
    }
}

// MARK: - Private Zone
private extension ResetLoginInteractor {
    
}
